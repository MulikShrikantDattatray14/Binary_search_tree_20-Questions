// Problem Statement: Given the root of a binary tree, determine if it is a valid binary search tree (BST).

// A valid BST is defined as follows:

// The left subtree of a node contains only nodes with keys less than the node’s key.
// The right subtree of a node contains only nodes with keys greater than the node’s key.
// Both the left and right subtrees must also be binary search trees.

// Definition of TreeNode structure
// for a binary tree node

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class TreeNode {
    // Constructor to initialize the node with a
    // value and set left and right pointers to null
    constructor(x) {
        this.val = x;
        this.left = null;
        this.right = null;
    }
}

function isValid(root) {
    // Calls the helper function isValidBST
    // with initial min and max values
    return isValidBST(root, Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);
}

// Helper function to recursively validate the BST property
function isValidBST(root, minVal, maxVal) {
    if (root === null) {
        // Base case: an empty
        // tree is a valid BST
        return true;
    }

    // Checks if the current node
    // violates the BST property
    if (root.val >= maxVal || root.val <= minVal) {
        return false;
    }

    // Recursively checks left and right
    // subtrees with updated constraints
    // that every value on its left subtree
    // should be smaller than the current node
    // and every value on its right subtree
    // should be greater than the current node
    return (
        isValidBST(root.left, minVal, root.val) &&
        isValidBST(root.right, root.val, maxVal)
    );
}

// Function to perform an in-order traversal
// of a binary tree and print its nodes
function printInOrder(root) {
    // Check if the current node
    // is null (base case for recursion)
    if (root === null) {
        // If null, return and
        // terminate the function
        return;
    }
    // Recursively call printInOrder
    // for the left subtree
    printInOrder(root.left);
    // Print the value of the current node
    console.log(root.val + " ");
    // Recursively call printInOrder
    // for the right subtree
    printInOrder(root.right);
}

// Creating a sample tree
let root = new TreeNode(6);
root.left = new TreeNode(3);
root.right = new TreeNode(8);
root.left.left = new TreeNode(2);
root.left.right = new TreeNode(4);
root.right.left = new TreeNode(-1);
console.log("Inorder Traversal of Tree:");
printInOrder(root);

// Checking if the created tree is a valid BST

let isValidBST1 = isValid(root);

if (isValidBST1) {
    console.log("The tree is a valid BST.");
} else {
    console.log("The tree is not a valid BST.");
}
