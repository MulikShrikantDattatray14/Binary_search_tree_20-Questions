
// Problem Statement: Given a BST and a number X, find the Ceil of X.
// Note: Ceil(X) is a number that is either equal to X or is immediately greater than X.

// If Ceil cannot be found, return -1.

class Node {
    constructor(data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

function findCeil(root, input) {
    let ceil = -1;
    while (root !== null) {
        if (root.data === input) {
            return input;  // If input is found in the tree, return it as ceil.
        } else if (root.data < input) {
            root = root.right;  // Move to the right subtree if input is greater than current node's data.
        } else {
            ceil = root.data;   // Mark ceil to be current node's data.
            root = root.left;   // Move to the left subtree to find a closer ceil value.
        }
    }

    return ceil;  // Return computed ceil value.
}

// Driver Code
let root = new Node(10);
root.left = new Node(5);
root.left.left = new Node(4);
root.left.right = new Node(7);
root.left.right.right = new Node(8);
root.right = new Node(11);

console.log(findCeil(root, 9));  // Find and print the ceil of 6 in the BST.