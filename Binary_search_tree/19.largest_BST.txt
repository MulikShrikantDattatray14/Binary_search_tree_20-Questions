// approach -1 ; pass each node in validate bst(ques-10) and if it is valid then maintain count of all the nodes - but it is 0(N2)

//https://www.geeksforgeeks.org/problems/largest-bst/1

// best explained :
//https://www.youtube.com/watch?v=6nJ_fUcCTNU
class Node {
  constructor(data, left = null, right = null) {
    this.data = data;
    this.left = left;
    this.right = right;
  }
}

function largestBST(root) {
  const ans = solve(root);
  return ans[1];
}
//[bst, size , min , max]
function solve(root) {
  if (root === null) {
    // now size is zero
    return [1, 0, Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER];
  }
  if (root.left === null && root.right === null) {
    return [1, 1, root.data, root.data];
  }
  const left = solve(root.left);
  const right = solve(root.right);
  if (
    left[0] == 1 &&
    right[0] == 1 &&
    root.data > left[3] &&
    root.data < right[2]
  ) {
    let x = left[2]; //min
    let y = right[3]; //max
    if (x === Number.MAX_SAFE_INTEGER) {
      x = root.data;
    }
    if (y === Number.MIN_SAFE_INTEGER) {
      y = root.data;
    }
    return [1, left[1] + right[1] + 1, x, y];
  }
  return [0, Math.max(left[1], right[1]), 0, 0];
}

// Example usage:
// Construct a sample tree
const root = new Node(10);
root.left = new Node(5);
root.right = new Node(15);
root.left.left = new Node(1);
root.left.right = new Node(8);
root.right.right = new Node(7);

// Call the function with the root of the tree
const result = largestBST(root);
console.log(result); // Output: 3 (size of the largest BST in the tree)

// int largestBST(Node * root){
//     vector<int> ans = solve(root);
//     return ans[1];
// }

// vector<int> solve(Node* root){
//     // case when a nodes has either no left or no right ;
//     if(root == null) return{1,0,int_max,int_min};
//     if(root.left==null && root.right == null ){
//         return {1,1,root.data,root.data};
//     }
//     vector<int> left= solve(root.left);
//     vector<int> right= solve(root.right);
//  // when left and right are making bst
//     if(left[0] && right[0]){
//   if((root.data > left[3])&&root.data < right[2]){
//     int x= left[2];
//     int y = right[3];

//     if(x==int_max) x=root.data;
//     if(y==int_min) y=root.data;
//     return {1,left[1]+right[1]+1,x,y}
//   }
//     }
// return {0,max(left[1] , right[1],0,0)}

// }
