// logic-1- inorder traversal and get elements in order and apply 2 pointer method and get the answer
// logic-2 (better approach) using hashmap- time and space - both order of N
// logic -3 (striver ka logic - see later)

class TreeNode {
    constructor(val, left = null, right = null) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

// Example 1
let root1 = new TreeNode(5);
root1.left = new TreeNode(3);
root1.right = new TreeNode(6);
root1.left.left = new TreeNode(2);
root1.left.right = new TreeNode(4);
root1.right.right = new TreeNode(7);

let k1 = 9;
console.log(ispresent(root1, k1)); // Output: true

// Example 2
let root2 = new TreeNode(5);
root2.left = new TreeNode(3);
root2.right = new TreeNode(6);
root2.left.left = new TreeNode(2);
root2.left.right = new TreeNode(4);
root2.right.right = new TreeNode(7);

let k2 = 28;
console.log(ispresent(root2, k2)); // Output: false

function ispresent(root, target) {
    let map = new Map();
    let ans = util(root, target, map);
    return ans;
}
function util(root, sum, map) {
    if (root == null) return false;
    if (util(root.left, sum, map) == true) return true;
    if (map.has(sum - root.val)) return true;
    map.set(root.val);
    return util(root.right, sum, map);
}
